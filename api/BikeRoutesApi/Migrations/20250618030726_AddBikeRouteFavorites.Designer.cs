// <auto-generated />
using System;
using BikeRoutesApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BikeRoutesApi.Migrations
{
    [DbContext(typeof(BikeRoutesDbContext))]
    [Migration("20250618030726_AddBikeRouteFavorites")]
    partial class AddBikeRouteFavorites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BikeRoutesApi.Entities.BikeRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<double?>("AverageSpeed")
                        .HasColumnType("double precision")
                        .HasColumnName("average_speed");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<Point>("EndPath")
                        .IsRequired()
                        .HasColumnType("geography(Point,4326)")
                        .HasColumnName("end_path");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<LineString>("PathRoutes")
                        .HasColumnType("geography(LineString,4326)")
                        .HasColumnName("path_routes");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<Point>("StartPath")
                        .IsRequired()
                        .HasColumnType("geography(Point,4326)")
                        .HasColumnName("start_path");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("bike_routes_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("bike_routes", (string)null);
                });

            modelBuilder.Entity("BikeRoutesApi.Entities.FavoriteBikeRoute", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("BikeRouteId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "BikeRouteId");

                    b.HasIndex("BikeRouteId");

                    b.ToTable("favorite_bike_routes", (string)null);
                });

            modelBuilder.Entity("BikeRoutesApi.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "users_phone_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BikeRoutesApi.Entities.BikeRoute", b =>
                {
                    b.HasOne("BikeRoutesApi.Entities.User", "User")
                        .WithMany("BikeRoutes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("bike_routes_users_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BikeRoutesApi.Entities.FavoriteBikeRoute", b =>
                {
                    b.HasOne("BikeRoutesApi.Entities.BikeRoute", "BikeRoute")
                        .WithMany("FavoriteBikeRoutes")
                        .HasForeignKey("BikeRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeRoutesApi.Entities.User", "User")
                        .WithMany("FavoriteBikeRoutes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BikeRoute");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BikeRoutesApi.Entities.BikeRoute", b =>
                {
                    b.Navigation("FavoriteBikeRoutes");
                });

            modelBuilder.Entity("BikeRoutesApi.Entities.User", b =>
                {
                    b.Navigation("BikeRoutes");

                    b.Navigation("FavoriteBikeRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
